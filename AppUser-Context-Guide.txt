================================================================================
                           APP USER CONTEXT USAGE GUIDE
================================================================================

OVERVIEW
--------
The AppUser Context provides centralized management for your application's user 
data (separate from Supabase Auth). It automatically fetches and manages user 
profile data from your "users" table.

SETUP (Already Done)
--------------------
‚úÖ AppUserProvider added to root layout.tsx
‚úÖ Context wraps your entire application
‚úÖ Automatically integrates with existing AuthProvider

BASIC USAGE
-----------

1. Import the hook:
   import { useAppUser } from '@/lib/app-user-context';

2. Use in any component:
   ```tsx
   function MyComponent() {
     const { appUser, loading, exists, error } = useAppUser();
     
     if (loading) return <div>Loading user data...</div>;
     if (error) return <div>Error: {error}</div>;
     if (!exists) return <div>Please create your profile</div>;
     if (!appUser) return <div>No user data</div>;
     
     return <div>Welcome, {appUser.username}!</div>;
   }
   ```

AVAILABLE PROPERTIES
--------------------

üìä STATE PROPERTIES:
- appUser: AppUser | null         // Full user object from database
- loading: boolean                // True during async operations  
- error: string | null           // Error message if operation failed
- exists: boolean | null         // null=checking, true=exists, false=doesn't exist

üõ†Ô∏è METHODS:
- createUser(username: string)    // Create new user profile
- updateUser(updates: Partial<AppUser>)  // Update existing user
- refreshUser()                   // Manually refresh user data

APPUSER INTERFACE
-----------------
```typescript
interface AppUser {
  id: string;
  email: string;
  username: string;
  created_at: string;
  updated_at: string;
  show_in_leaderboards: boolean;
  show_focus_stats: boolean;
  show_earnings: boolean;
  show_job_stats: boolean;
  avatar_customization: any;
  total_currency: string;
  current_job_id: string | null;
  current_location_id: string | null;
  current_salary: string;
}
```

COMMON PATTERNS
---------------

üîπ DISPLAY USER INFO:
```tsx
function UserProfile() {
  const { appUser, loading } = useAppUser();
  
  if (loading) return <Skeleton />;
  if (!appUser) return <CreateUserCard />;
  
  return (
    <div>
      <h1>{appUser.username}</h1>
      <p>Balance: ${appUser.total_currency}</p>
    </div>
  );
}
```

üîπ UPDATE USER DATA:
```tsx
function UpdateProfile() {
  const { updateUser, appUser } = useAppUser();
  
  const handleToggleLeaderboard = async () => {
    const result = await updateUser({ 
      show_in_leaderboards: !appUser?.show_in_leaderboards 
    });
    
    if (result.success) {
      toast.success("Settings updated!");
    } else {
      toast.error(result.error);
    }
  };
  
  return (
    <Switch 
      checked={appUser?.show_in_leaderboards} 
      onCheckedChange={handleToggleLeaderboard}
    />
  );
}
```

üîπ CONDITIONAL RENDERING:
```tsx
function Dashboard() {
  const { exists, loading } = useAppUser();
  
  if (loading) return <LoadingSpinner />;
  
  return (
    <div>
      {exists ? <MainDashboard /> : <CreateUserCard />}
    </div>
  );
}
```

üîπ ACCESS IN NAVIGATION:
```tsx
function Navigation() {
  const { appUser } = useAppUser();
  
  return (
    <nav>
      {appUser && (
        <div>
          <Avatar src={appUser.avatar_customization?.url} />
          <span>Welcome, {appUser.username}</span>
        </div>
      )}
    </nav>
  );
}
```

ERROR HANDLING
--------------

The context provides built-in error handling:
- Network errors
- Database constraint violations  
- Authentication issues
- Validation errors

```tsx
function MyComponent() {
  const { error, createUser } = useAppUser();
  
  const handleSubmit = async (username: string) => {
    const result = await createUser(username);
    
    if (!result.success) {
      // Handle specific error
      console.error(result.error);
    }
  };
  
  // Global error display
  if (error) {
    return <ErrorAlert message={error} />;
  }
}
```

AUTOMATIC BEHAVIOR
------------------

‚ú® The context automatically:
- Fetches user data when auth user logs in
- Clears user data when auth user logs out  
- Re-fetches if auth user changes
- Handles loading states during operations
- Caches data to prevent unnecessary API calls

INTEGRATION WITH EXISTING AUTH
------------------------------

The AppUser context works alongside your existing auth context:

AuthProvider (Supabase Auth) ‚Üí Handles login/logout/session
     ‚Üì
AppUserProvider ‚Üí Manages application user profile data

Both contexts are independent but AppUser listens to auth state changes.

BEST PRACTICES
--------------

‚úÖ DO:
- Use loading states for better UX
- Handle error states gracefully  
- Check if user exists before showing features
- Use updateUser for any profile changes
- Display username instead of email when possible

‚ùå DON'T:
- Fetch user data manually in components
- Store user data in component state
- Ignore error states
- Call refreshUser unnecessarily (it auto-refreshes)

TROUBLESHOOTING
---------------

üêõ "useAppUser must be used within an AppUserProvider"
   ‚Üí Component is outside the provider wrapper

üêõ User data not loading
   ‚Üí Check network tab for API errors
   ‚Üí Verify Supabase table permissions
   ‚Üí Check auth context is working

üêõ Updates not reflecting
   ‚Üí Context auto-updates after successful operations
   ‚Üí Check for error responses from updateUser

üêõ Multiple API calls
   ‚Üí Context caches data automatically
   ‚Üí Only refreshes on auth state changes

EXAMPLE IMPLEMENTATIONS
-----------------------

See these files for reference:
- components/ui-support/CreateUserCard.tsx (User creation)
- lib/app-user-context.tsx (Full context implementation)

================================================================================
Need help? Check the context implementation or create an issue.
================================================================================
